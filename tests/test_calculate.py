from src.power import calculate_expression
import pytest

class TestCalculateExpression:

    # Верные выражения

    @pytest.mark.parametrize("expression, expected_result", [
        # Стандартные выражения
        ('3 4 +', 7),
        ('15 4 -', 11),
        ('58 60 -', -2),
        ('200 300 -', -100),
        ('3 10 *', 30),
        ('50 5 /', 10),
        ('5 8 9 + -', -12),
        ('9 6 4 2 / - *', 36),
        ('3 3 **', 27),
        ('5 8 + 5 % 3 +', 6),
        ('9 8 + 5 // 3 **', 27),
        ('34 3 %', 1),
        ('58 7 //', 8),
        ('63 9 // 2 ** 9 -', 40),

        # Выражения с унарными операторами

        ('7 ~ 3 +', -4),
        ('98 ~ 30 ~ +', -128),
        ('7 $ 3 +', 10),
        ('3 7 * ~', -21),
        ('35 5 ~ /', -7),
        ('6 ~ 5 -', -11),
        ('( 9 8 % ) ~ 6 %', 5),
        ('39 339 - 11 //', -28),
        ('( 30 10 20 40 50 + - * - ) ~', -730),
        ('( 5 ~ )', -5),
        ('3 4 + ~', -7),
        ('( 5 $ )', 5),
        ('( 3 ~ 5 + ) 3 **', 8),
        ('-5', -5),
        ('+5', 5),
        ('-3 4 + +5 +', 6),

        # Выражения со скобками

        ('( 3 5 + )', 8),
        ('4 ( 5 9 * ) +', 49),
        ('( 18 2 / ) 6 *', 54),
        ('( 5 ( 25 3 5 * // ) + ) 3 /', 2),
        ('9 ( 8 6 * ) ( 8 5 % ) + * 17 /', 27),
        ('( ( ( ( ( 5 5 + ) ) ) ) )', 10),
        ('( 5 )', 5),

        # Различная дичь

        ('( 1 ( 5 ( 4 ( 8 ( 9 ( 36 ( 48 ( 4 3 + ) // ) / ) + ) - ) * ) + ) + )', -22),
        ('( ( ( 1 ( ( ( ( 8 2 * ) ) ) ) + ) ) ) 9 +', 26),
        (' ( ( ( ( 5 ~ ) ) ) ) ', -5),
        ('99 ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~', 99),
        ('1 2 + 3 * 4 - 5 // 6 ** 7 % 8 + 9 - 10 * 11 // 12 - 13 % 14 + 15 - 16 + ~', -16),
        ('( 128 32 / ) $ $ $ $ $ $ ~ $ $ $ $ ~ $ ~', -4),
        ('2 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 *', 1073741824),
        ('1 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 6 /', 2),
        ('5 ~ $ ~ $ ~ $ ~ $ ~ $ ~ $ ~ $ ~ $ ~ $ ~ $ ~ $ ~ $ ~ $ ~ $ ~ $', -5),
        ('100 33 // 2 ** 5 ~ + 4 $ * 3 // 7 8 % -', -2),
        ('( ( ( ( ( 5 ~ ) 3 * ) 2 + ) 4 // ) 2 ** )', 16),
        ('( 1 ( 2 ( 3 ( 4 ( 5 ( 6 ( 7 8 + ) * ) - ) // ) + ) * ) + )', 5),
        ('1 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 + 36 + 37 + 38 + 39 + 40 + 41 + 42 + 43 + 44 + 45 + 46 + 47 + 48 + 49 + 50 +', 1275),
        ('10 $ ~ $ ~ $ ~ $ ~ $ ~ $ ~ $ ~ $ ~ $ ~ $ ~ $ ~ $ ~ $ ~ $ ~ $ ~', -10),
        ('( ( ( ( ( ( ( ( ( ( 1 ) 2 + ) 3 * ) 4 - ) 5 // ) 6 ** ) 7 % ) 8 + ) 9 - ) 10 - )', -10),
        ('( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( 10 ~ ) $ ) ~ ) $ ) ~ ) $ ) ~ ) $ ) ~ ) $ ) ~ ) $ ) ~ ) $ ) ~ ) $ ) ~ ) $ ) ~ ) $ ) ~ ) $ ) ~ ) $ ) ~ ) $ ) ~ ) $ ) ~ ) $ ) ~ ) $ ) ~ ) $ ) ~ ) $ ) ~ ) $ ) ~ ) $ ) ~ ) $ )', -10),
        ('15 4 // 3 ** 2 ~ * 5 $ + 6 7 % - 8 9 + / 10 * 11 / 12 ** 13 ~ + 14 / 15 -', 29915.32869459219),
        ('( ( 2 3 ** ) ( 4 5 * ) + 6 ) 7 // - 8 9 % + 10 11 * - 12 13 + / 14 15 - * 16 17 // + 18 19 % - 20 21 * + 22 23 // - 24 25 % + 8.96 - ~', -420),
        ('9223372036854775808 288230376151711744 // 2 ** 3 * 4 + 5 - 6 % 7 + 8 - 9 * 10 *', 360),
        ('15 7 // 3 ** 4 * 2 + 8 - 5 % 6 + 9 - 10 * 11 // 12 + 13 - 14 * 15 // 2 -', -5),
        ('100 33 // 2 ** 5 ~ * 4 $ + 3 // 7 8 % - 9 + 10 * 11 // 12 -', -23),
        ('256 16 // 4 ** 2 ~ * 3 $ + 8 // 5 7 % - 6 + 9 * 10 // 11 -', -14756),
        ('100 50 - 25 + 10 2 ** * 3 // 7 %', 1),
        ('( ( ( 5 4 3 2 1 + + + + ) ) 10 * ) 3 // 5 %', 0),
        ('( 999 888 - 777 + 666 * 555 // ) 444 %', 177),
        ('( 2 2 ** ) 2 ** 2 ** 2 ** 2 ** 2 ** 2 ** 12930 %', 8836),
        ('1 2 3 4 5 6 7 8 ( 9 10 + ) + + + + + + + + 10 //', 5),
        ('100 3 // 3 // 3 // 3 // 3 // 3 // 3 // 3 // 3 // 3 //', 0),
        ('50 40 - 30 + 20 * 10 // 5 % 2 **', 0),
        ('1 ~ 2 ~ 3 ~ 4 ~ 5 ~ + + + + 5 //', -3),
        ('100 200 300 400 500 + - + - 50 //', 10),
        ('2 3 ** 4 5 ** * 6 7 ** * 8 9 ** * 10 %', 6),
        ('999999 888888 - 777777 + 666666 * 555555 // 444444 %', 177777),
        ('1 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 10 //', 21),
        ('100 50 25 12 6 3 1 + + + + - - 10 * 5 //', 194),
        ('5 ~ 4 ~ 3 ~ 2 ~ 1 ~ * * * * 10 //', -12),
        ('2 2 2 2 2 2 2 2 2 2 * * * * * * * * * 1024 //', 1),
        ('100 99 - 98 + 97 - 96 + 95 - 94 + 93 - 92 + 91 - 90 + 10 //', 9),
        ('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 * * * * * * * * * * * * * * * * * * * 1000000000 //', 2432902008),
        ('50 40 30 20 10 5 2 1 + + + + + + + 10 * 5 //', 316),
        ('100 ~ 50 ~ 25 ~ 12 ~ 6 ~ 3 ~ 1 ~ + + + + + + 10 //', -20),
        ('2 3 4 5 6 7 8 9 10 + - + - + - + - 10 +', 20),
        ('999 888 777 666 555 444 333 222 111 + - + - + - + - 100 // 10 +', 11),
        ('1 2 ** 2 3 ** ** 3 4 ** ** 4 5 ** ** 5 6 ** ** 1000000000 //', 0),
        ('100 200 300 400 500 600 700 800 900 + - * // * // * //', -1),
        ('5 4 3 2 1 ~ ~ ~ ~ ~ * * * * 10 //', -12),
        ('10 9 8 7 6 5 4 3 2 1 + - * + * + * + *', 3050),
        ('100 50 25 12 6 3 1 ~ ~ ~ ~ ~ ~ ~ + + + + + + 10 //', 19),
        ('2 2 2 2 2 2 2 2 2 2 ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ * * * * * * * * * 1024 //', 1),
        ('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ + + + + + + + + + + + + + + + + + + + 10 // ~', -21),
        ('50 40 30 20 10 5 2 1 ~ ~ ~ ~ ~ ~ ~ ~ + + + + + + + 10 * 5 //', 316),
        ('100 99 98 97 96 95 94 93 92 91 90 ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ - + - + - + - + - + 10 //', 28),
        ('999 888 777 666 555 444 333 222 111 ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ - + - + - + - + 100 //', 9)

    ])
    def test_calculate(self, expression, expected_result):
        assert calculate_expression(expression) == expected_result

    def test_wrong_expressions(self):
        with pytest.raises(SyntaxError):
            calculate_expression('')
            calculate_expression('( 5 8 +')
            calculate_expression('3 9 - )')
            calculate_expression('GOIDA')
            calculate_expression('RULETKA')
            calculate_expression('5 9 + -')
            calculate_expression('~ + 97')
            calculate_expression('4 ( 5 6 + - )')
            calculate_expression('( )')
            calculate_expression('( ( 22 43 + )')
            calculate_expression('( 9 9 * ) )')
            calculate_expression('( 5 6 +)')
            calculate_expression('(8 9 * 2 + )')
            calculate_expression('$ $ $ $ 8 9 +')
            calculate_expression('+ - + - - + - - - + + - - -')
            calculate_expression('5+5-9*28-3+2')
            calculate_expression('--5')
            calculate_expression('~$~$~$~$~$~$$~$~$~999')
            calculate_expression('~5')
            calculate_expression('$10')
            calculate_expression('()()()()()()()()()() 3 5 +')
            calculate_expression('DELETE WINDOWS LINUX IS BETTER')
            calculate_expression('( ) 5 4 - ( )')
            calculate_expression('+5 - 4')
            calculate_expression('- 5')
            calculate_expression('( 5 4 + ) =')

        with pytest.raises(ValueError):
            calculate_expression('3 0 /')
            calculate_expression('5 ( 8 3 5 + - ) //')
            calculate_expression('68 ( 4 1 5 - + ) %')
            calculate_expression('5 3.5 //')
            calculate_expression('10 2.1 %')
            calculate_expression('2.22 // 19')
            calculate_expression('291.2478 % 828')
            calculate_expression('24.2 % 182.3')
            calculate_expression('36.2 // 32.2')
            calculate_expression('( 4 3 / ) 2 //')
            calculate_expression('5 8 / 6 %')
            calculate_expression('( 5 8 / 6 - ) 2 //')
            calculate_expression('100 3 / 3 / 3 / 3 / 3 / 3 / 3 / 3 / 10 //')
            calculate_expression('50 3 / 4 %')
